"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/dashboard/institution",{

/***/ "./hooks/useContract.ts":
/*!******************************!*\
  !*** ./hooks/useContract.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useContract: function() { return /* binding */ useContract; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wagmi */ \"./node_modules/wagmi/dist/esm/exports/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"./node_modules/viem/_esm/index.js\");\n/* harmony import */ var _contracts_ExamManagement_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/ExamManagement.json */ \"./contracts/ExamManagement.json\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/index.mjs\");\n\n\n\n\n\nconst EXAM_MANAGEMENT_ADDRESS = \"0x15B70b2C305c684Ef6335b64b0CA430e481c3ac5\" || 0;\nconst CERTIFICATES_ADDRESS = \"0x91F73a8778C82983253fEC5C0a63f87beA461AFd\" || 0;\nconst EXAMINATIONS_ADDRESS = \"0x1cE1DF501cF629b04c6B647e5A7BDE8245BcE02A\" || 0;\nconst IDENTITY_ADDRESS = \"0xb8F6dE405c3A2876d0a14Fa08Ee5D92793bFbbA1\" || 0;\nconst SECURITY_UTILS_ADDRESS = \"0x705D62Df2879E56545e9A9A6381c6a8e200e390c\" || 0;\nconst TARGET_CHAIN_ID = 1337; // Local network chain ID\nconst useContract = ()=>{\n    const { address: account } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useAccount)();\n    const publicClient = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.usePublicClient)();\n    const { data: walletClient } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWalletClient)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const { connect } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useConnect)();\n    const toast = (0,_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.useToast)();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        examManagementContract: null,\n        certificatesContract: null,\n        examinationsContract: null,\n        identityContract: null,\n        securityUtilsContract: null,\n        isConnected: false,\n        isInitialized: false,\n        isLoading: false,\n        networkSwitchAttempted: false,\n        initializationAttempted: false,\n        initializationError: null,\n        retryCount: 0,\n        lastInitAttemptTime: 0\n    });\n    // Handle initial connection check\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const checkConnection = async ()=>{\n            if (!account && !state.initializationAttempted) {\n                toast({\n                    title: \"يرجى توصيل المحفظة | Please Connect Wallet\",\n                    description: \"يجب توصيل المحفظة للمتابعة | Wallet connection is required to continue\",\n                    status: \"warning\",\n                    duration: 5000,\n                    isClosable: true\n                });\n                setState((prev)=>({\n                        ...prev,\n                        initializationAttempted: true\n                    }));\n            }\n        };\n        checkConnection();\n    }, [\n        account,\n        state.initializationAttempted,\n        toast\n    ]);\n    // Initialize contracts only when wallet is connected\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        let retryTimeout;\n        const initialize = async ()=>{\n            if (!isMounted || !account || !walletClient) return;\n            // Prevent rapid re-initialization attempts\n            const now = Date.now();\n            if (now - state.lastInitAttemptTime < 2000) {\n                return;\n            }\n            console.log(\"Checking connection and initializing:\", {\n                account,\n                hasWalletClient: !!walletClient,\n                chainId,\n                targetChainId: TARGET_CHAIN_ID,\n                retryCount: state.retryCount,\n                isLoading: state.isLoading,\n                timeSinceLastAttempt: now - state.lastInitAttemptTime\n            });\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: true,\n                    lastInitAttemptTime: now\n                }));\n            try {\n                // Check network first\n                const isCorrectNetwork = chainId === TARGET_CHAIN_ID;\n                if (!isCorrectNetwork) {\n                    if (!window.ethereum) {\n                        throw new Error(\"MetaMask is not installed\");\n                    }\n                    try {\n                        // Request network switch\n                        await window.ethereum.request({\n                            method: \"wallet_switchEthereumChain\",\n                            params: [\n                                {\n                                    chainId: \"0x\".concat(TARGET_CHAIN_ID.toString(16))\n                                }\n                            ]\n                        });\n                        // Wait for network switch to complete\n                        await new Promise((resolve)=>setTimeout(resolve, 2000));\n                        // Verify the switch\n                        const newChainId = await window.ethereum.request({\n                            method: \"eth_chainId\"\n                        });\n                        const expectedChainId = \"0x\".concat(TARGET_CHAIN_ID.toString(16));\n                        if (newChainId !== expectedChainId) {\n                            throw new Error(\"Network switch failed\");\n                        }\n                    } catch (switchError) {\n                        if (switchError.code === 4902) {\n                            // Network needs to be added\n                            await window.ethereum.request({\n                                method: \"wallet_addEthereumChain\",\n                                params: [\n                                    {\n                                        chainId: \"0x\".concat(TARGET_CHAIN_ID.toString(16)),\n                                        chainName: \"Ganache Local\",\n                                        rpcUrls: [\n                                            \"http://127.0.0.1:7545\"\n                                        ],\n                                        nativeCurrency: {\n                                            name: \"ETH\",\n                                            symbol: \"ETH\",\n                                            decimals: 18\n                                        }\n                                    }\n                                ]\n                            });\n                        } else {\n                            setState((prev)=>({\n                                    ...prev,\n                                    isLoading: false,\n                                    initializationError: \"يرجى تغيير الشبكة إلى الشبكة المحلية | Please switch to local network\"\n                                }));\n                            return;\n                        }\n                    }\n                }\n                if (!EXAM_MANAGEMENT_ADDRESS || !publicClient) {\n                    throw new Error(\"Missing required configuration\");\n                }\n                // Initialize contract\n                const examManagement = (0,viem__WEBPACK_IMPORTED_MODULE_4__.getContract)({\n                    address: EXAM_MANAGEMENT_ADDRESS,\n                    abi: _contracts_ExamManagement_json__WEBPACK_IMPORTED_MODULE_1__.abi,\n                    client: publicClient\n                });\n                // Create base contract\n                const baseContract = {\n                    isInstitution: async (address)=>{\n                        return await examManagement.read.isInstitution([\n                            address\n                        ]);\n                    },\n                    getInstitution: async (address)=>{\n                        return await examManagement.read.getInstitution([\n                            address\n                        ]);\n                    },\n                    getInstitutionExams: async (address)=>{\n                        return await examManagement.read.getInstitutionExams([\n                            address\n                        ]);\n                    },\n                    getExamResults: async (examId)=>{\n                        return await examManagement.read.getExamResults([\n                            examId\n                        ]);\n                    },\n                    write: {}\n                };\n                // Initialize write methods\n                if (walletClient) {\n                    const examManagementWrite = (0,viem__WEBPACK_IMPORTED_MODULE_4__.getContract)({\n                        address: EXAM_MANAGEMENT_ADDRESS,\n                        abi: _contracts_ExamManagement_json__WEBPACK_IMPORTED_MODULE_1__.abi,\n                        client: walletClient\n                    });\n                    baseContract.write = {\n                        updateInstitutionProfile: async (params)=>{\n                            const hash = await examManagementWrite.write.updateInstitutionProfile(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        },\n                        submitExamResults: async (params)=>{\n                            const hash = await examManagementWrite.write.submitExamResults(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        },\n                        registerStudents: async (params)=>{\n                            const hash = await examManagementWrite.write.registerStudents(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        },\n                        updateExamStatus: async (params)=>{\n                            const hash = await examManagementWrite.write.updateExamStatus(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        },\n                        createExam: async (params)=>{\n                            const hash = await examManagementWrite.write.createExam(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        },\n                        issueCertificate: async (params)=>{\n                            const hash = await examManagementWrite.write.issueCertificate(params.args);\n                            return {\n                                wait: async ()=>{\n                                    await publicClient.waitForTransactionReceipt({\n                                        hash\n                                    });\n                                }\n                            };\n                        }\n                    };\n                }\n                if (isMounted) {\n                    setState((prev)=>({\n                            ...prev,\n                            examManagementContract: baseContract,\n                            isConnected: true,\n                            isInitialized: true,\n                            isLoading: false,\n                            initializationError: null,\n                            retryCount: 0\n                        }));\n                    console.log(\"Contracts initialized successfully\");\n                }\n            } catch (error) {\n                console.error(\"Error initializing contracts:\", error);\n                if (isMounted && state.retryCount < 3) {\n                    const delay = Math.min(2000 * Math.pow(2, state.retryCount), 8000);\n                    retryTimeout = setTimeout(()=>{\n                        setState((prev)=>({\n                                ...prev,\n                                retryCount: prev.retryCount + 1,\n                                isLoading: false\n                            }));\n                    }, delay);\n                } else if (isMounted) {\n                    setState((prev)=>({\n                            ...prev,\n                            isInitialized: false,\n                            isLoading: false,\n                            initializationError: error instanceof Error ? error.message : \"Unknown error\",\n                            retryCount: 0\n                        }));\n                    toast({\n                        title: \"خطأ في تهيئة العقود | Contract Initialization Error\",\n                        description: \"\".concat(error instanceof Error ? error.message : \"Unknown error\", \" | يرجى التأكد من اتصال المحفظة والشبكة الصحيحة\"),\n                        status: \"error\",\n                        duration: 8000,\n                        isClosable: true\n                    });\n                }\n            }\n        };\n        initialize();\n        return ()=>{\n            isMounted = false;\n            if (retryTimeout) {\n                clearTimeout(retryTimeout);\n            }\n        };\n    }, [\n        account,\n        chainId,\n        walletClient,\n        publicClient,\n        state.retryCount,\n        state.lastInitAttemptTime,\n        toast\n    ]);\n    // Event listener for network changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _window_ethereum;\n        if ( true && ((_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.on)) {\n            const handleChainChanged = async (newChainId)=>{\n                console.log(\"Network changed to:\", newChainId);\n                const expectedChainId = \"0x\".concat(TARGET_CHAIN_ID.toString(16));\n                if (newChainId !== expectedChainId) {\n                    console.log(\"Wrong network detected, resetting contracts...\");\n                    setState((prev)=>({\n                            ...prev,\n                            examManagementContract: null,\n                            certificatesContract: null,\n                            examinationsContract: null,\n                            identityContract: null,\n                            securityUtilsContract: null,\n                            isInitialized: false,\n                            initializationAttempted: false,\n                            initializationError: \"يرجى تغيير الشبكة إلى الشبكة المحلية | Please switch to local network\",\n                            retryCount: 0\n                        }));\n                    // Reload the page to ensure clean state\n                    window.location.reload();\n                }\n            };\n            window.ethereum.on(\"chainChanged\", handleChainChanged);\n            return ()=>{\n                var _window_ethereum;\n                if ((_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.removeListener) {\n                    window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n                }\n            };\n        }\n    }, []);\n    return {\n        examManagementContract: state.examManagementContract,\n        certificatesContract: state.certificatesContract,\n        examinationsContract: state.examinationsContract,\n        identityContract: state.identityContract,\n        securityUtilsContract: state.securityUtilsContract,\n        account,\n        isConnected: state.isConnected,\n        isInitialized: state.isInitialized,\n        isLoading: state.isLoading,\n        isCorrectNetwork: chainId === TARGET_CHAIN_ID,\n        initializationError: state.initializationError\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useContract.ts\n"));

/***/ })

});