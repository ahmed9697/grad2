"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/dashboard/institution",{

/***/ "./hooks/useContract.ts":
/*!******************************!*\
  !*** ./hooks/useContract.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useContract: function() { return /* binding */ useContract; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"./node_modules/wagmi/dist/esm/exports/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"./node_modules/viem/_esm/index.js\");\n/* harmony import */ var _contracts_ExamManagement_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/ExamManagement.json */ \"./contracts/ExamManagement.json\");\n/* harmony import */ var _contracts_Certificates_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/Certificates.json */ \"./contracts/Certificates.json\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/index.mjs\");\n\n\n\n\n\n\nconst EXAM_MANAGEMENT_ADDRESS = \"0x15B70b2C305c684Ef6335b64b0CA430e481c3ac5\" || 0;\nconst CERTIFICATES_ADDRESS = \"0x91F73a8778C82983253fEC5C0a63f87beA461AFd\" || 0;\nconst EXAMINATIONS_ADDRESS = \"0x1cE1DF501cF629b04c6B647e5A7BDE8245BcE02A\" || 0;\nconst IDENTITY_ADDRESS = \"0xb8F6dE405c3A2876d0a14Fa08Ee5D92793bFbbA1\" || 0;\nconst SECURITY_UTILS_ADDRESS = \"0x705D62Df2879E56545e9A9A6381c6a8e200e390c\" || 0;\nconst TARGET_CHAIN_ID = 1337; // Local network chain ID\nconst useContract = ()=>{\n    const { address: account } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useAccount)();\n    const publicClient = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.usePublicClient)();\n    const { data: walletClient } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useWalletClient)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useChainId)();\n    const { connect } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useConnect)();\n    const toast = (0,_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.useToast)();\n    // Separate initialization states\n    const [initState, setInitState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isLoading: true,\n        hasAttemptedConnection: false,\n        hasAttemptedNetworkSwitch: false,\n        hasVerifiedNetwork: false,\n        hasVerifiedContracts: false,\n        error: null,\n        retryCount: 0\n    });\n    // Contract states\n    const [contracts, setContracts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        examManagementContract: null,\n        certificatesContract: null,\n        examinationsContract: null,\n        identityContract: null,\n        securityUtilsContract: null\n    });\n    // Network verification\n    const verifyNetwork = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicClient) return false;\n        try {\n            const currentChainId = await publicClient.getChainId();\n            console.log(\"Network verification - Current: \".concat(currentChainId, \", Target: \").concat(TARGET_CHAIN_ID));\n            return currentChainId === TARGET_CHAIN_ID;\n        } catch (error) {\n            console.error(\"Network verification failed:\", error);\n            return false;\n        }\n    }, [\n        publicClient\n    ]);\n    // Network switching\n    const switchNetwork = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!window.ethereum) {\n            throw new Error(\"MetaMask غير مثبت | MetaMask is not installed\");\n        }\n        try {\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: \"0x\".concat(TARGET_CHAIN_ID.toString(16))\n                    }\n                ]\n            });\n        } catch (error) {\n            if (error.code === 4902) {\n                await window.ethereum.request({\n                    method: \"wallet_addEthereumChain\",\n                    params: [\n                        {\n                            chainId: \"0x\".concat(TARGET_CHAIN_ID.toString(16)),\n                            chainName: \"Ganache Local\",\n                            rpcUrls: [\n                                \"http://127.0.0.1:7545\"\n                            ],\n                            nativeCurrency: {\n                                name: \"ETH\",\n                                symbol: \"ETH\",\n                                decimals: 18\n                            }\n                        }\n                    ]\n                });\n            } else {\n                throw error;\n            }\n        }\n    }, []);\n    // Contract verification\n    const verifyContracts = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicClient) return false;\n        try {\n            const [examCode, certCode] = await Promise.all([\n                publicClient.getBytecode({\n                    address: EXAM_MANAGEMENT_ADDRESS\n                }),\n                publicClient.getBytecode({\n                    address: CERTIFICATES_ADDRESS\n                })\n            ]);\n            if (!examCode || examCode === \"0x\") {\n                throw new Error(\"عقد إدارة الاختبارات غير موجود | Exam Management contract not found\");\n            }\n            if (!certCode || certCode === \"0x\") {\n                throw new Error(\"عقد الشهادات غير موجود | Certificates contract not found\");\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Contract verification failed:\", error);\n            return false;\n        }\n    }, [\n        publicClient\n    ]);\n    // Contract initialization\n    const initializeContracts = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicClient || !walletClient || !account) {\n            throw new Error(\"المتطلبات الأساسية غير متوفرة | Core requirements not available\");\n        }\n        // Create contract instances\n        const examManagement = (0,viem__WEBPACK_IMPORTED_MODULE_5__.getContract)({\n            address: EXAM_MANAGEMENT_ADDRESS,\n            abi: _contracts_ExamManagement_json__WEBPACK_IMPORTED_MODULE_1__.abi,\n            client: publicClient,\n            walletClient\n        });\n        const certificates = (0,viem__WEBPACK_IMPORTED_MODULE_5__.getContract)({\n            address: CERTIFICATES_ADDRESS,\n            abi: _contracts_Certificates_json__WEBPACK_IMPORTED_MODULE_2__.abi,\n            client: publicClient,\n            walletClient\n        });\n        // Test contract connections\n        try {\n            await Promise.all([\n                examManagement.read.isInstitution([\n                    account\n                ]),\n                certificates.read.getInstitutionCertificates([\n                    account\n                ])\n            ]);\n        } catch (error) {\n            console.error(\"Contract test failed:\", error);\n            throw new Error(\"فشل في اختبار الاتصال بالعقود | Contract connection test failed\");\n        }\n        return {\n            examManagement,\n            certificates\n        };\n    }, [\n        publicClient,\n        walletClient,\n        account\n    ]);\n    // Main initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        let retryTimeout;\n        const initialize = async ()=>{\n            if (!isMounted) return;\n            try {\n                // 1. Check dependencies\n                if (!account || !publicClient || !walletClient) {\n                    setInitState((prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: \"يرجى توصيل المحفظة أولاً | Please connect wallet first\"\n                        }));\n                    return;\n                }\n                // 2. Verify network\n                const isCorrectNetwork = await verifyNetwork();\n                if (!isCorrectNetwork) {\n                    if (initState.retryCount >= 3) {\n                        throw new Error(\"فشل في تبديل الشبكة | Network switch failed\");\n                    }\n                    try {\n                        await switchNetwork();\n                        setInitState((prev)=>({\n                                ...prev,\n                                hasAttemptedNetworkSwitch: true,\n                                retryCount: prev.retryCount + 1\n                            }));\n                        // Retry after network switch\n                        retryTimeout = setTimeout(initialize, 1000);\n                        return;\n                    } catch (error) {\n                        throw new Error(\"فشل في تبديل الشبكة | Network switch failed\");\n                    }\n                }\n                // 3. Verify contracts\n                const contractsVerified = await verifyContracts();\n                if (!contractsVerified) {\n                    throw new Error(\"فشل في التحقق من العقود | Contract verification failed\");\n                }\n                // 4. Initialize contracts\n                const { examManagement, certificates } = await initializeContracts();\n                // 5. Update state with initialized contracts\n                if (isMounted) {\n                    setContracts({\n                        examManagementContract: {\n                            isInstitution: async (address)=>{\n                                const result = await examManagement.read.isInstitution([\n                                    address\n                                ]);\n                                return result === true;\n                            },\n                            getInstitution: async (address)=>{\n                                return await examManagement.read.getInstitution([\n                                    address\n                                ]);\n                            },\n                            getInstitutionExams: async (address)=>{\n                                var _ref;\n                                return (_ref = await examManagement.read.getInstitutionExams([\n                                    address\n                                ])) !== null && _ref !== void 0 ? _ref : [];\n                            },\n                            getExamResults: async (examId)=>{\n                                var _ref;\n                                return (_ref = await examManagement.read.getExamResults([\n                                    examId\n                                ])) !== null && _ref !== void 0 ? _ref : [];\n                            },\n                            write: {\n                                updateInstitutionProfile: async (params)=>{\n                                    const hash = await examManagement.write.updateInstitutionProfile(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                },\n                                submitExamResults: async (params)=>{\n                                    const hash = await examManagement.write.submitExamResults(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                },\n                                registerStudents: async (params)=>{\n                                    const hash = await examManagement.write.registerStudents(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                },\n                                updateExamStatus: async (params)=>{\n                                    const hash = await examManagement.write.updateExamStatus(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                },\n                                createExam: async (params)=>{\n                                    const hash = await examManagement.write.createExam(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                },\n                                issueCertificate: async (params)=>{\n                                    const hash = await examManagement.write.issueCertificate(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                }\n                            }\n                        },\n                        certificatesContract: {\n                            getInstitutionCertificates: async (address)=>{\n                                var _ref;\n                                return (_ref = await certificates.read.getInstitutionCertificates([\n                                    address\n                                ])) !== null && _ref !== void 0 ? _ref : [];\n                            },\n                            write: {\n                                issueCertificate: async (params)=>{\n                                    const hash = await certificates.write.issueCertificate(params.args);\n                                    return {\n                                        wait: async ()=>{\n                                            await publicClient.waitForTransactionReceipt({\n                                                hash\n                                            });\n                                        }\n                                    };\n                                }\n                            }\n                        },\n                        examinationsContract: null,\n                        identityContract: null,\n                        securityUtilsContract: null\n                    });\n                    setInitState((prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            hasVerifiedNetwork: true,\n                            hasVerifiedContracts: true,\n                            error: null\n                        }));\n                }\n            } catch (error) {\n                console.error(\"Initialization error:\", error);\n                if (isMounted) {\n                    setInitState((prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: error instanceof Error ? error.message : \"Unknown error\"\n                        }));\n                    setContracts({\n                        examManagementContract: null,\n                        certificatesContract: null,\n                        examinationsContract: null,\n                        identityContract: null,\n                        securityUtilsContract: null\n                    });\n                    toast({\n                        title: \"خطأ في التهيئة | Initialization Error\",\n                        description: error instanceof Error ? \"\".concat(error.message, \" | يرجى التأكد من اتصال المحفظة والشبكة الصحيحة\") : \"حدث خطأ غير معروف | An unknown error occurred\",\n                        status: \"error\",\n                        duration: 5000,\n                        isClosable: true\n                    });\n                }\n            }\n        };\n        initialize();\n        return ()=>{\n            isMounted = false;\n            if (retryTimeout) {\n                clearTimeout(retryTimeout);\n            }\n        };\n    }, [\n        account,\n        publicClient,\n        walletClient,\n        chainId,\n        verifyNetwork,\n        verifyContracts,\n        initializeContracts,\n        toast,\n        initState.retryCount\n    ]);\n    // Network change handler\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _window_ethereum;\n        if ( true && ((_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.on)) {\n            const handleChainChanged = ()=>{\n                console.log(\"Network changed, resetting state...\");\n                setInitState((prev)=>({\n                        ...prev,\n                        isLoading: true,\n                        hasVerifiedNetwork: false,\n                        hasVerifiedContracts: false,\n                        error: null,\n                        retryCount: 0\n                    }));\n                setContracts({\n                    examManagementContract: null,\n                    certificatesContract: null,\n                    examinationsContract: null,\n                    identityContract: null,\n                    securityUtilsContract: null\n                });\n            };\n            window.ethereum.on(\"chainChanged\", handleChainChanged);\n            return ()=>{\n                var _window_ethereum;\n                if ((_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.removeListener) {\n                    window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n                }\n            };\n        }\n    }, []);\n    return {\n        ...contracts,\n        account,\n        isConnected: !!account && initState.hasVerifiedNetwork && initState.hasVerifiedContracts,\n        isInitialized: initState.hasVerifiedContracts,\n        isLoading: initState.isLoading,\n        isCorrectNetwork: chainId === TARGET_CHAIN_ID,\n        initializationError: initState.error\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useContract.ts\n"));

/***/ })

});