"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/ethersConfig.ts":
/*!*******************************!*\
  !*** ./utils/ethersConfig.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXPECTED_NETWORK: function() { return /* binding */ EXPECTED_NETWORK; },\n/* harmony export */   formatEther: function() { return /* binding */ formatEther; },\n/* harmony export */   getContract: function() { return /* binding */ getContract; },\n/* harmony export */   getProvider: function() { return /* binding */ getProvider; },\n/* harmony export */   getSigner: function() { return /* binding */ getSigner; },\n/* harmony export */   handleContractError: function() { return /* binding */ handleContractError; },\n/* harmony export */   switchToCorrectNetwork: function() { return /* binding */ switchToCorrectNetwork; },\n/* harmony export */   validateAddress: function() { return /* binding */ validateAddress; },\n/* harmony export */   validateNetwork: function() { return /* binding */ validateNetwork; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n\n// Network configuration\nconst EXPECTED_NETWORK = {\n    chainId: \"1337\",\n    chainIdHex: \"0x539\",\n    name: \"Localhost\",\n    rpcUrl: \"http://127.0.0.1:7545\",\n    nativeCurrency: {\n        name: \"ETH\",\n        symbol: \"ETH\",\n        decimals: 18\n    }\n};\n// Function to switch to the correct network\nconst switchToCorrectNetwork = async (ethereum)=>{\n    try {\n        console.log(\"Attempting to switch network...\");\n        // First check current network\n        const currentChainId = await ethereum.request({\n            method: \"eth_chainId\"\n        });\n        console.log(\"Current chainId:\", currentChainId);\n        if (currentChainId === EXPECTED_NETWORK.chainIdHex) {\n            console.log(\"Already on correct network\");\n            return;\n        }\n        console.log(\"Switching to network:\", EXPECTED_NETWORK.chainIdHex);\n        // Try to switch to the network\n        await ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: EXPECTED_NETWORK.chainIdHex\n                }\n            ]\n        });\n        // Wait a bit for the network switch to complete\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Verify the switch was successful\n        const newChainId = await ethereum.request({\n            method: \"eth_chainId\"\n        });\n        if (newChainId !== EXPECTED_NETWORK.chainIdHex) {\n            throw new Error(\"Network switch failed\");\n        }\n        console.log(\"Successfully switched to correct network\");\n    } catch (switchError) {\n        console.error(\"Error in switchToCorrectNetwork:\", switchError);\n        // This error code indicates that the chain has not been added to MetaMask\n        if (switchError.code === 4902) {\n            try {\n                console.log(\"Network not found, attempting to add...\");\n                await ethereum.request({\n                    method: \"wallet_addEthereumChain\",\n                    params: [\n                        {\n                            chainId: EXPECTED_NETWORK.chainIdHex,\n                            chainName: EXPECTED_NETWORK.name,\n                            rpcUrls: [\n                                EXPECTED_NETWORK.rpcUrl\n                            ],\n                            nativeCurrency: EXPECTED_NETWORK.nativeCurrency\n                        }\n                    ]\n                });\n                // Wait a bit for the network to be added\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // Verify the network was added and switched to\n                const finalChainId = await ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                if (finalChainId !== EXPECTED_NETWORK.chainIdHex) {\n                    throw new Error(\"Network add failed\");\n                }\n                console.log(\"Successfully added and switched to network\");\n            } catch (addError) {\n                console.error(\"Error adding network:\", addError);\n                throw new Error(\"يرجى إضافة الشبكة المحلية يدوياً | Please add the local network manually\");\n            }\n        } else {\n            console.error(\"Error switching network:\", switchError);\n            throw new Error(\"يرجى تغيير الشبكة إلى الشبكة المحلية | Please switch to local network\");\n        }\n    }\n};\n// Provider and signer functions\nconst getProvider = async ()=>{\n    if (!window.ethereum) {\n        throw new Error(\"MetaMask غير مثبت - MetaMask is not installed\");\n    }\n    try {\n        // First check if we're on the correct network before doing anything else\n        const currentChainId = await window.ethereum.request({\n            method: \"eth_chainId\"\n        });\n        console.log(\"Initial chain ID check:\", currentChainId);\n        if (currentChainId !== EXPECTED_NETWORK.chainIdHex) {\n            console.log(\"Wrong network detected, attempting to switch...\");\n            await switchToCorrectNetwork(window.ethereum);\n            // Verify the switch was successful\n            const newChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (newChainId !== EXPECTED_NETWORK.chainIdHex) {\n                throw new Error(\"Failed to switch to correct network\");\n            }\n        }\n        // Only request accounts after we're on the correct network\n        await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        // Create provider using BrowserProvider\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n        return provider;\n    } catch (error) {\n        console.error(\"Error getting provider:\", error);\n        throw error;\n    }\n};\nconst getSigner = async ()=>{\n    const provider = await getProvider();\n    return provider.getSigner();\n};\nconst validateNetwork = async (provider)=>{\n    try {\n        console.log(\"Validating network...\");\n        const network = await provider.getNetwork();\n        const chainId = network.chainId.toString();\n        console.log(\"Current chainId:\", chainId, \"Expected:\", EXPECTED_NETWORK.chainId);\n        if (chainId !== EXPECTED_NETWORK.chainId) {\n            console.log(\"Wrong network detected in validateNetwork\");\n            if (!window.ethereum) {\n                throw new Error(\"يرجى الاتصال بشبكة \".concat(EXPECTED_NETWORK.name, \" (Chain ID: \").concat(EXPECTED_NETWORK.chainId, \") | Please connect to \").concat(EXPECTED_NETWORK.name, \" network\"));\n            }\n            // Get the current chain ID directly from ethereum provider\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            console.log(\"Current chain ID from ethereum:\", currentChainId);\n            if (currentChainId !== EXPECTED_NETWORK.chainIdHex) {\n                await switchToCorrectNetwork(window.ethereum);\n                // Wait for the network switch to complete\n                await new Promise((resolve)=>setTimeout(resolve, 1500));\n                // Verify one final time\n                const finalChainId = await window.ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                if (finalChainId !== EXPECTED_NETWORK.chainIdHex) {\n                    throw new Error(\"Network switch verification failed\");\n                }\n            }\n        }\n        console.log(\"Network validation passed\");\n    } catch (error) {\n        console.error(\"Network validation failed:\", error);\n        throw error;\n    }\n};\n// Helper functions for working with contracts\nconst getContract = (address, abi, signer)=>{\n    return new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(address, abi, signer);\n};\nconst validateAddress = (address)=>{\n    if (!address) {\n        throw new Error(\"Address is required\");\n    }\n    try {\n        return (0,ethers__WEBPACK_IMPORTED_MODULE_0__.getAddress)(address);\n    } catch (error) {\n        throw new Error(\"Invalid Ethereum address\");\n    }\n};\nconst formatEther = (value)=>{\n    return (0,ethers__WEBPACK_IMPORTED_MODULE_0__.formatUnits)(value, 18);\n};\n// Utility function to handle common contract errors\nconst handleContractError = (error)=>{\n    var _error_message, _error_message1, _error_message2;\n    console.error(\"Contract error:\", error);\n    if (error.reason) {\n        throw new Error(\"Smart contract error: \".concat(error.reason));\n    } else if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"user rejected\")) {\n        throw new Error(\"Transaction rejected by user\");\n    } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"insufficient funds\")) {\n        throw new Error(\"Insufficient funds to complete the transaction\");\n    } else if ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"network\")) {\n        throw new Error(\"Please make sure you are connected to the correct network\");\n    } else {\n        throw new Error(\"Transaction failed. Please check your connection and try again.\");\n    }\n};\n// Event listener for network changes\nif ( true && window.ethereum) {\n    window.ethereum.on(\"chainChanged\", (chainId)=>{\n        console.log(\"Network changed to:\", chainId);\n        if (chainId !== EXPECTED_NETWORK.chainIdHex) {\n            console.log(\"Wrong network after change, reloading...\");\n            window.location.reload();\n        }\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/ethersConfig.ts\n"));

/***/ })

});